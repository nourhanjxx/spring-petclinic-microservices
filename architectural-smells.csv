Smell,Primary Service / Module,Code File Path (if applicable),Code Line(s),Labeling justification in details
"Insufficient Modularization","spring-petclinic-customers-service","src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java; src/main/java/org/springframework/samples/petclinic/owner/PetController.java","OwnerController.java:L73-L175; PetController.java:L62-L180","Customer-facing flows for owners and pets live side by side in the same controller layer: owner search, profile editing, pet registration, and pet validation all execute inside a single Spring Boot module instead of being isolated into separate bounded contexts." 
"Insufficient Modularization","spring-petclinic-visits-service","src/main/java/org/springframework/samples/petclinic/owner/VisitController.java; src/main/java/org/springframework/samples/petclinic/owner/Owner.java","VisitController.java:L62-L102; Owner.java:L65-L175","Visit booking is implemented inside the owner module rather than a dedicated visits component, and the visit controller mutates the owner aggregate directly to add visits, collapsing two responsibilities into one deployment." 
"Insufficient Modularization","spring-petclinic-vets-service","src/main/java/org/springframework/samples/petclinic/vet/VetController.java; src/main/java/org/springframework/samples/petclinic/vet/Vets.java","VetController.java:L44-L75; Vets.java:L31-L41","The vets slice exposes HTML views, JSON endpoints, pagination logic, and a custom wrapper class from the same controller, so presentation concerns, data transfer, and repository coordination are bundled into a single module." 
"Greedy Service","spring-petclinic-customers-service","src/main/java/org/springframework/samples/petclinic/owner/PetController.java","PetController.java:L62-L180","PetController loads owners, validates pet names and birth dates, pulls pet types, updates aggregates, and persists changes in one transaction script, accumulating multiple responsibilities without delegation." 
"Greedy Service","spring-petclinic-visits-service","src/main/java/org/springframework/samples/petclinic/owner/VisitController.java; src/main/java/org/springframework/samples/petclinic/owner/Owner.java","VisitController.java:L62-L102; Owner.java:L165-L175","VisitController preloads owners, constructs visits, handles validation feedback, updates owner aggregates, and persists the owner entity to store visits, concentrating workflow, persistence, and domain mutation in a single class." 
"Greedy Service","spring-petclinic-vets-service","src/main/java/org/springframework/samples/petclinic/vet/VetController.java","VetController.java:L44-L75","VetController is responsible for pagination, HTML model population, API serialization, and repository access all in one class, orchestrating disparate concerns instead of delegating to narrower services." 
"Hub-like Services","spring-petclinic-visits-service","src/main/java/org/springframework/samples/petclinic/owner/VisitController.java; src/main/java/org/springframework/samples/petclinic/owner/OwnerRepository.java","VisitController.java:L44-L102; OwnerRepository.java:L37-L61","Every visit request routes through OwnerRepository: the controller fetches owners, retrieves pets, and saves visits by persisting the owner, turning the repository into a central hub that couples visit scheduling to customer persistence." 
"Service Intimacy","spring-petclinic-visits-service","src/main/java/org/springframework/samples/petclinic/owner/VisitController.java; src/main/java/org/springframework/samples/petclinic/owner/Owner.java; src/main/java/org/springframework/samples/petclinic/owner/Pet.java","VisitController.java:L62-L102; Owner.java:L165-L175; Pet.java:L57-L84","Visit flows reach into the owner aggregate to attach visits and rely on pet collections exposed by the customer domain, demonstrating tight knowledge of another service's internals instead of coarse-grained collaboration." 
"Shared Persistency","spring-petclinic-visits-service","src/main/resources/application.properties; src/main/resources/application-mysql.properties; src/main/resources/application-postgres.properties; src/main/java/org/springframework/samples/petclinic/owner/Visit.java","application.properties:L1-L11; application-mysql.properties:L1-L7; application-postgres.properties:L1-L7; Visit.java:L35-L67","All runtime profiles point to the single `petclinic` schema, and the Visit entity maps to that database alongside owners and pets, so the visits feature writes to the same physical persistence store as the customer domain." 
"Unnecessary Abstraction","spring-petclinic-customers-service","src/main/java/org/springframework/samples/petclinic/owner/PetTypeFormatter.java; src/main/java/org/springframework/samples/petclinic/owner/PetController.java","PetTypeFormatter.java:L36-L60; PetController.java:L62-L124","PetTypeFormatter loops through every pet type on each parse even though PetController already exposes typed `PetType` options to the view, forcing an extra Spring bean that mirrors repository access without adding behavior." 
"Unversioned API","spring-petclinic-customers-service","src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java; src/main/java/org/springframework/samples/petclinic/owner/PetController.java; src/main/java/org/springframework/samples/petclinic/owner/VisitController.java","OwnerController.java:L73-L175; PetController.java:L99-L158; VisitController.java:L84-L101","Customer, pet, and visit endpoints live directly under `/owners`, `/pets`, and `/visits` paths without version prefixes, preventing parallel evolution of new API versions." 
"Broken Modularization","spring-petclinic-customers-service","src/main/java/org/springframework/samples/petclinic/owner/Owner.java; src/main/java/org/springframework/samples/petclinic/owner/Pet.java; src/main/java/org/springframework/samples/petclinic/owner/VisitController.java","Owner.java:L65-L175; Pet.java:L57-L84; VisitController.java:L62-L102","Owner aggregates cascade persistence to pets and visits, and VisitController persists through the owner aggregate, meaning customer data structures own visit scheduling logic instead of confining it to a separate module." 
"Broken Modularization","spring-petclinic-visits-service","src/main/java/org/springframework/samples/petclinic/owner/VisitController.java; src/main/java/org/springframework/samples/petclinic/owner/Owner.java","VisitController.java:L62-L102; Owner.java:L165-L175","The visits workflow is packaged under the owner domain and persists via owner entities, so visit logic cannot change without touching customer classes, signaling a broken module boundary for the visits service." 
"Broken Modularization","spring-petclinic-vets-service","src/main/java/org/springframework/samples/petclinic/vet/VetController.java; src/main/java/org/springframework/samples/petclinic/vet/Vets.java","VetController.java:L44-L75; Vets.java:L31-L41","Vets combines HTML page assembly, REST responses, and an XML-friendly wrapper in one controller package, mixing presentation adapters and data containers into the core vets module instead of separating them." 
"Cyclic Dependency","spring-petclinic-visits-service","src/main/java/org/springframework/samples/petclinic/owner/VisitController.java; src/main/java/org/springframework/samples/petclinic/owner/Owner.java; src/main/java/org/springframework/samples/petclinic/owner/Pet.java","VisitController.java:L62-L102; Owner.java:L98-L175; Pet.java:L57-L84","VisitController saves visits by calling Owner.addVisit from the customers aggregate, which mutates Pet visit collections that embed the Visit entity itself; the visits endpoint thus depends on the customer domain while the customer aggregate stores Visit objects, creating a mutual dependency between the visits feature and customer data model even though the customers service has no separate outbound cycle." 
