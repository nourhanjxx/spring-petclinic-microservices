Smell,Primary Service / Module,Code File Path (if applicable),Code Line(s),Labeling justification in details
"Insufficient Modularization","spring-petclinic-customers-service, spring-petclinic-visits-service, spring-petclinic-vets-service","src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java; src/main/java/org/springframework/samples/petclinic/owner/PetController.java; src/main/java/org/springframework/samples/petclinic/owner/VisitController.java; src/main/java/org/springframework/samples/petclinic/vet/VetController.java","OwnerController:L73-L175; PetController:L99-L180; VisitController:L84-L101; VetController:L44-L75","The single Spring Boot deployment owns owner self-service flows, pet lifecycle management, visit booking, and veterinary directory endpoints in the same module. OwnerController handles owner CRUD, PetController mutates pets under the same repository, VisitController coordinates visit creation by directly persisting owner aggregates, and VetController publishes vet listings, demonstrating multiple bounded contexts collapsed into one service instead of separate modules or services."
"Unversioned API","spring-petclinic-customers-service, spring-petclinic-visits-service, spring-petclinic-vets-service, spring-petclinic-admin-server","src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java; src/main/java/org/springframework/samples/petclinic/owner/PetController.java; src/main/java/org/springframework/samples/petclinic/owner/VisitController.java; src/main/java/org/springframework/samples/petclinic/vet/VetController.java; src/main/java/org/springframework/samples/petclinic/system/CrashController.java; src/main/java/org/springframework/samples/petclinic/system/WelcomeController.java","OwnerController:L73-L175; PetController:L99-L158; VisitController:L84-L101; VetController:L44-L75; CrashController:L31-L34; WelcomeController:L25-L27","All HTTP handlers are mounted directly at root-level paths such as /owners, /pets, /vets, /owners/{ownerId}/pets/{petId}/visits/new, /oups, and /. No URI version segment or media-type negotiation is implemented, preventing the team from running v1 and v2 APIs concurrently and forcing breaking changes onto consumers."
"Shared Persistency","spring-petclinic-customers-service, spring-petclinic-visits-service, spring-petclinic-vets-service","src/main/resources/application.properties; src/main/resources/application-mysql.properties; src/main/resources/application-postgres.properties","application.properties:L1-L24; application-mysql.properties:L1-L7; application-postgres.properties:L1-L7","All runtime profiles target the single `petclinic` schema, whether the app runs with the in-memory profile or the optional MySQL and Postgres configurations. The only components that own state—the owners, pets, visits, and vets features—persist through this shared datasource, while the remaining infrastructure controllers stay stateless, so the shared-database smell is confined to these three functional slices."
"Broken Modularization","spring-petclinic-customers-service","src/main/java/org/springframework/samples/petclinic/owner/Owner.java; src/main/java/org/springframework/samples/petclinic/owner/Pet.java; src/main/java/org/springframework/samples/petclinic/owner/PetController.java; src/main/java/org/springframework/samples/petclinic/owner/VisitController.java","Owner.java:L65-L175; Pet.java:L49-L84; PetController.java:L99-L180; VisitController.java:L62-L100","Owner aggregates cascade persistence to pets and visits and expose helper methods like `addVisit`, while PetController and VisitController both operate inside the owner package and persist changes through the owner aggregate. Cross-cutting responsibilities for pet lifecycle and visit scheduling are hard-wired into the owner module rather than living in dedicated modules."
"Hub-like Dependency","spring-petclinic-customers-service","src/main/java/org/springframework/samples/petclinic/owner/OwnerRepository.java; src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java; src/main/java/org/springframework/samples/petclinic/owner/PetController.java; src/main/java/org/springframework/samples/petclinic/owner/VisitController.java","OwnerRepository.java:L37-L61; OwnerController.java:L54-L158; PetController.java:L53-L180; VisitController.java:L44-L100","OwnerRepository acts as a hub for every customer-facing flow: owner profile CRUD, pet registration and editing, and visit booking all call back into the same JPA repository instance. Controllers across multiple concerns depend on it, so changes to the owner persistence contract ripple through pet and visit endpoints as well."
"Unnecessary Abstraction","spring-petclinic-vets-service","src/main/java/org/springframework/samples/petclinic/vet/Vets.java; src/main/java/org/springframework/samples/petclinic/vet/VetController.java","Vets.java:L25-L41; VetController.java:L44-L75","The dedicated `Vets` wrapper class only stores an in-memory `List<Vet>` and controllers must instantiate it before delegating to `VetRepository`. Both the HTML and JSON endpoints immediately copy repository results into this wrapper without adding behavior or isolation, so the extra type merely mirrors `Collection<Vet>` and forces boilerplate object creation across the vets service."
"Cyclic Dependency","spring-petclinic-customers-service, spring-petclinic-visits-service","src/main/java/org/springframework/samples/petclinic/owner/VisitController.java; src/main/java/org/springframework/samples/petclinic/owner/Owner.java; src/main/java/org/springframework/samples/petclinic/owner/Pet.java","VisitController.java:L62-L100; Owner.java:L160-L175; Pet.java:L57-L84","Visit scheduling is wired through a bidirectional dependency between the visit flow and the owner aggregate: the visit controller loads an owner, attaches the visit through `Owner.addVisit`, and persists the owner entity to save the visit. The owner aggregate in turn depends on pet and visit collections to fulfill that call, so visit logic cannot change without touching the owner module and vice versa."
"Greedy Service","spring-petclinic-customers-service","src/main/java/org/springframework/samples/petclinic/owner/PetController.java","PetController.java:L62-L180","`PetController` coordinates owner lookup, pet-type catalog queries, duplicate-name validation, temporal checks, and persistence of the full owner aggregate when adding or editing a pet. Rather than delegating to smaller services, it orchestrates validation, repository access, and aggregate mutation itself, concentrating multiple responsibilities from the customer domain into a single transactional script."
